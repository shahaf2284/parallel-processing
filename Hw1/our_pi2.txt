//
// Created by Iris Eting on 31/01/2024.
//
#include "mpi.h"
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>

int main(int argc, char *argv[])
{
    int done = 0, myid, numprocs, i;
    double PI25DT = 3.141592653589793238462643;
    int namelen;
    char processor_name[MPI_MAX_PROCESSOR_NAME];

    MPI_Init(&argc, &argv);
    MPI_Comm_size(MPI_COMM_WORLD, &numprocs);
    MPI_Comm_rank(MPI_COMM_WORLD, &myid);
    MPI_Get_processor_name(processor_name, &namelen);

    fprintf(stdout, "Process %d of %d on %s\n", myid, numprocs, processor_name);

    // Seed the random number generator with the current time
    srand((unsigned int)time(NULL));

    int totalThrows = 0;
    int hits = 0;

    // Number of Monte Carlo throws for each process
    int throwsPerProcess = 1000000;

    double startwtime = MPI_Wtime();

    while (!done)
    {
        // Each process performs its own Monte Carlo simulation
        for (i = 0; i < throwsPerProcess; ++i)
        {
            double x = ((double)rand() / RAND_MAX) * 2 - 1; // Random x in the range [-1, 1]
            double y = ((double)rand() / RAND_MAX) * 2 - 1; // Random y in the range [-1, 1]

            double distance = x * x + y * y;

            if (distanceSquared <= 1)
            {
                // Point (x, y) is inside the unit circle
                hits++;
            }
        }

        totalThrows += throwsPerProcess;

        // Declare a variable for the reduction result
        int globalHits = 0;

        // Reduction to get the global hits count
        MPI_Reduce(&hits, &globalHits, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);
        MPI_Bcast(&totalThrows, 1, MPI_INT, 0, MPI_COMM_WORLD);

        if (myid == 0)
        {
            double piApprox = 2.0 * globalHits / totalThrows;

            printf("Approximation of pi is %.16f, Error is %.16f\n", piApprox, fabs(piApprox - PI25DT));
            done = 1; // End the simulation after one iteration
        }
    }

    double endwtime = MPI_Wtime();
    if (myid == 0)
    {
        printf("Wall clock time = %f\n", endwtime - startwtime);
    }

    MPI_Finalize();
    return 0;
}
